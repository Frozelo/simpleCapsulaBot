package main

import (
	"context"
	"errors"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

var (
	shortForm         = "2006-Jan-02"
	fixedDate         time.Time
	notifyTime        = 30 * time.Second
	messages          = make(map[int64]string)
	waitingForCapsule = make(map[int64]bool)
)

func main() {
	bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_TOKEN"))
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ: %v", err)
	}

	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –∞–∫–∫–∞—É–Ω—Ç–µ %s", bot.Self.UserName)
	ctx, cancel := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer cancel()

	fixedDate, err = time.Parse(shortForm, "2025-Sep-02")
	if err != nil {
		log.Fatal(err)
	}

	go func(ctx context.Context, bot *tgbotapi.BotAPI) {
		if err = startNotifier(ctx, bot); err != nil {
			if !errors.Is(err, context.Canceled) {
				log.Printf("Error starting notifier: %v", err)
				return
			}
			log.Printf("[INFO] notifier stopped")
		}
	}(ctx, bot)

	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60

	updates, err := bot.GetUpdatesChan(updateConfig)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %v", err)
	}

	for update := range updates {
		if update.Message == nil {
			continue
		}

		if update.Message.IsCommand() {
			handleCommand(bot, update.Message)
		} else {
			handleMessage(bot, update.Message)
		}
	}
}

func handleCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	switch message.Command() {
	case "start":
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–æ–∫! üåü –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–∞–ø—Å—É–ª–∞–º –≤—Ä–µ–º–µ–Ω–∏! –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –∫–∞–ø—Å—É–ª—É –≤—Ä–µ–º–µ–Ω–∏, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ—ë –¥–ª—è —Ç–µ–±—è!")
		msg.ReplyMarkup = getReplyMarkup()
		sendMessage(bot, msg)
	case "help":
		msg := tgbotapi.NewMessage(message.Chat.ID, "ü§ó –ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –∫–∞–ø—Å—É–ª–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏! –í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:\n\n"+
			"1Ô∏è‚É£ **–ù–∞–ø–∏—Å–∞—Ç—å –∫–∞–ø—Å—É–ª—É**: –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–ø–∏—Å–∞—Ç—å –∫–∞–ø—Å—É–ª—É', –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –º–µ—á—Ç—ã –Ω–∞ –±—É–¥—É—â–µ–µ!\n\n"+
			"2Ô∏è‚É£ **–ü–æ–ª—É—á–∏—Ç—å –∫–∞–ø—Å—É–ª—É**: –ö–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –≤—Ä–µ–º—è, —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –∫–∞–ø—Å—É–ª—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å –∫–∞–ø—Å—É–ª—É'. –Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –æ –Ω–µ–π!\n\n"+
			"–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å! üåà")
		sendMessage(bot, msg)
	}

}

func handleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	switch message.Text {
	case "–ù–∞–ø–∏—Å–∞—Ç—å –∫–∞–ø—Å—É–ª—É":
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£—Ä–∞! üéâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –∫–∞–ø—Å—É–ª—É –≤—Ä–µ–º–µ–Ω–∏. –Ø —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É —Ç–≤–æ–∏—Ö —Å–ª–æ–≤!")
		sendMessage(bot, msg)
		waitingForCapsule[message.Chat.ID] = true

	case "–ü–æ–ª—É—á–∏—Ç—å –∫–∞–ø—Å—É–ª—É":
		userId := message.From.ID
		SendMessageCapsule(bot, userId)
	default:
		if waiting, ok := waitingForCapsule[message.Chat.ID]; ok && waiting {
			messages[message.Chat.ID] = message.Text
			if _, err := bot.DeleteMessage(tgbotapi.DeleteMessageConfig{
				ChatID:    message.Chat.ID,
				MessageID: message.MessageID,
			}); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			}

			msg := tgbotapi.NewMessage(message.Chat.ID, "–ö–∞–ø—Å—É–ª–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üéä –¢–µ–ø–µ—Ä—å –æ–Ω–∞ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!")
			sendMessage(bot, msg)
			delete(waitingForCapsule, message.Chat.ID)

		} else {
			msg := tgbotapi.NewMessage(message.Chat.ID, "–û–π, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑? ü§î –ò–ª–∏ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /help –¥–ª—è –º–æ–µ–π –ø–æ–º–æ—â–∏")
			sendMessage(bot, msg)
		}
	}
}

func getReplyMarkup() tgbotapi.ReplyKeyboardMarkup {
	btn1 := tgbotapi.NewKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∫–∞–ø—Å—É–ª—É")
	btn2 := tgbotapi.NewKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–∞–ø—Å—É–ª—É")

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(btn1, btn2),
	)
	return keyboard
}

func sendMessage(bot *tgbotapi.BotAPI, msg tgbotapi.MessageConfig) {
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func SendMessageCapsule(bot *tgbotapi.BotAPI, userId int) {
	if capsule, ok := messages[int64(userId)]; ok {
		remainingTime := time.Until(fixedDate)
		if remainingTime > 0 {
			daysRemaining := int(remainingTime.Hours() / 24)
			msg := tgbotapi.NewMessage(int64(userId),
				fmt.Sprintf("–û–π, –ø–æ–¥–æ–∂–¥–∏ –µ—â–µ %d –¥–Ω–µ–π –¥–æ 2 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞! ‚è≥ –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —Ç–≤–æ—è –∫–∞–ø—Å—É–ª–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞!", daysRemaining))
			sendMessage(bot, msg)
		} else {
			msg := tgbotapi.NewMessage(int64(userId), fmt.Sprintf("–í–æ—Ç —Ç–≤–æ—è –∫–∞–ø—Å—É–ª–∞ –≤—Ä–µ–º–µ–Ω–∏: %s üéà –ù–∞–¥–µ—é—Å—å, –æ–Ω–∞ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ —Ä–∞–¥–æ—Å—Ç—å!", capsule))
			sendMessage(bot, msg)
		}
	} else {
		msg := tgbotapi.NewMessage(int64(userId), "–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∫–∞–ø—Å—É–ª—ã –≤—Ä–µ–º–µ–Ω–∏. –î–∞–≤–∞–π –Ω–∞–ø–∏—à–µ–º –æ–¥–Ω—É –≤–º–µ—Å—Ç–µ! ‚úçÔ∏è")
		sendMessage(bot, msg)
	}
}

func startNotifier(ctx context.Context, bot *tgbotapi.BotAPI) error {
	ticker := time.NewTicker(notifyTime)
	defer ticker.Stop()
	for {
		select {
		case <-ticker.C:
			Notify(bot)
		case <-ctx.Done():
			return ctx.Err()
		}
	}

}

func Notify(bot *tgbotapi.BotAPI) {
	for userId, _ := range messages {
		SendMessageCapsule(bot, int(userId))
	}
}
